% Wrapper for ST1ULacquisitionRefinePeriodo.
%-------------------------------------------------------------
% ST1ULacquisitionRefinePeriodoWrapper.m 
%
% [SoftDec,maxcorr] = ST1ULacquisitionRefinePeriodoWrapper(Rx, SoftDec, ModemParams, STAcqParams)
% 
% Inputs:
%   Rx          - Vector containing samples of received signal
%   AcqParams   - Struct holding aquisition parameters
%       .T          - symbol period
%       .OS         - oversampling factor
%       .fr_min     - minimum Doppler rate [Hz/s]
%       .fr_max     - maximum Doppler rate [Hz/s]
%
% Outputs:
%   fhat        - Frequency estimate [Hz]
%   frhat       - Estimate of the Doppler rate [Hz/s]
%   amplhat     - Complex gain estimate
%
% Comments:
% 
%-------------------------------------------------------------
% Author: A. Pollok, Institute for Telecommunications Research
% Project: ASRP
%-------------------------------------------------------------
% Copyright 2012 
% Institute for Telecommunications Research
% University of South Australia
%-------------------------------------------------------------

function [SoftDec,maxcorr] = ST1ULacquisitionRefinePeriodoWrapper(Rx, SoftDec, ModemParams, STAcqParams)

% coarse estimate generated by ST1ULacquisitionWrapper.m
frhatcoarse    = SoftDec.Fd*ModemParams.Fs;

% backup SoftDec structure
SoftDecCoarse = SoftDec;
% set coefficients of polynomial phase to zero for rebuilding
SoftDec.PhOff = 0;
SoftDec.Fo    = 0;
SoftDec.Fd    = 0;
SoftDec.SigPowEst = 1;

% rebuild estimated signal including tone
x_est       = pulseshapefilter(SoftDec.SoftSyms, ModemParams);
if ModemParams.AddTone
%     SoftDec.x_est     = addtone(SoftDec.x_est, [], ModemParams, STAcqParams, mean(abs(SoftDec.SymsApp)));
  x_est     = addtone(x_est, [], ModemParams, STAcqParams);
end

% apply channel offsets (except phase parameters)
ModemParams.ChanType  = 'chanadd';
TxHat = satchan(x_est, SoftDec, ModemParams, SoftDec);

% sample times, assuming time origin at first sample
tSamp = (0:length(Rx)-1)*STAcqParams.T/STAcqParams.OS;

% call actual refining acquisition module
if ((STAcqParams.fr_min-STAcqParams.fr_max) ~= 0)
    STAcqParams.fr_min_refine = -10;
    STAcqParams.fr_max_refine = +10;
else
    % assume zero frequency rate offset
    STAcqParams.fr_min_refine = 0;
    STAcqParams.fr_max_refine = 0;
end
[fhat,frhat,amplhat] = ST1ULacquisitionRefinePeriodo(Rx,TxHat,tSamp,frhatcoarse,STAcqParams);
phihat = angle(amplhat);

% limit Doppler rate estimates to the range [fr_min,fr_max]
if (frhat > STAcqParams.fr_max)
    frhat = STAcqParams.fr_max;
elseif (frhat < STAcqParams.fr_min)
    frhat = STAcqParams.fr_min;
end

%-----------------------------------------------------------------%
%       Transfer channel offset estimates to SD structure
%-----------------------------------------------------------------%
SoftDec.Fo     = fhat/ModemParams.Fs;
SoftDec.Fd     = frhat/ModemParams.Fs;
SoftDec.PhOff  = phihat;

% scaling of signal and noise power
SoftDec.SigPowEst   = abs(amplhat).^2;

%-----------------------------------------------------------------%
%       Compute maximum correction
%-----------------------------------------------------------------%
correction = [
   (SoftDecCoarse.Fo        - SoftDec.Fo)*ModemParams.Fs, ...
   (SoftDecCoarse.Fd        - SoftDec.Fd)*ModemParams.Fs, ...
    SoftDecCoarse.PhOff     - SoftDec.PhOff, ...
    SoftDecCoarse.SigPowEst - SoftDec.SigPowEst];
maxcorr = max(abs(correction));

end